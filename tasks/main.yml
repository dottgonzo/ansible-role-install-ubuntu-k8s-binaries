---
- name: Add Kubernetes GPG key
  apt_key: 
    url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: present

- name: Install Kubernetes prerequisites
  apt:
    name:
      [
        "apt-transport-https",
        "ca-certificates",
        "curl",
        "gnupg2",
        "software-properties-common",
      ]
    update_cache: yes

- name: Add Kubernetes APT repository
  apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
    state: present

- name: Download Containerd from github sources
  unarchive:
    src: https://github.com/containerd/containerd/releases/download/v2.1.1/containerd-2.1.1-linux-amd64.tar.gz
    dest: /tmp
    remote_src: True

- name: Cerca i file da copiare in /tmp/bin
  ansible.builtin.find:
    paths: /tmp/bin
    patterns: '*'       # Cerca tutti i file
    file_type: file   # Cerca solo file (esclude directory)
  register: files_da_copiare # Salva i risultati in una variabile

- name: Copia i file trovati in /bin
  ansible.builtin.copy:
    src: "{{ item.path }}" # Il percorso completo del file sorgente
    dest: /usr/local/bin/             # La directory di destinazione
    remote_src: yes       # Indica che 'src' Ã¨ sul server remoto
    mode: '0755'          # Imposta i permessi (opzionale, ma consigliato per /bin)
  loop: "{{ files_da_copiare.files }}" # Esegui per ogni file trovato
  when: files_da_copiare.matched > 0 # Esegui solo se sono stati trovati file

- name: Download containerd service file
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /etc/systemd/system/containerd.service
    mode: '0644'

- name: Clean up the temporary directory
  file:
    path: /tmp/bin
    state: absent

- name: "Create a directory for cni binary"
  file: 
    path: /opt/cni/bin/
    state: directory

- name: "Create a directory for cni config files"
  file: 
    path: /etc/cni/net.d/
    state: directory

- name: "Create a directory for containerd config"
  file: 
    path: /etc/containerd 
    state: directory

- name: "default config containerd"
  shell: containerd config default>/etc/containerd/config.toml

- name: set true on runtimes.runc.options
  shell: 'sed -i "s#SystemdCgroup\ \=\ false#SystemdCgroup\ \=\ true#g" /etc/containerd/config.toml'

- name: "Start Containerd"
  systemd: 
    name: containerd 
    daemon_reload: yes 
    state: started 
    enabled: yes

- name: "Load br_netfilter kernel module"
  modprobe:
    name: br_netfilter
    state: present

- name: "Load overlay kernel module"
  modprobe:
    name: overlay
    state: present

- name: "Set bridge-nf-call-iptables"
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: "net.bridge.bridge-nf-call-ip6tables"
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1

- name: "Set ip_forward"
  sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl
  register: installed

- name: apt mark hold Kubernetes
  shell: 'apt-mark hold kubelet kubeadm kubectl'
